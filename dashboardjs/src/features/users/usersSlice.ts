import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export interface UsersState {
  value: string[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: UsersState = {
  value: [],
  status: 'idle',
};

export const usersAsync = createAsyncThunk(
  'users/getUsers',
  async () => {
    console.log('usersAsync');
    const response = await fetch(
        "http://localhost:3001/users")
                  .then((res) => res.json())
                  .then((json) => {
                    console.log('json',json);
                      return json;
                  });
    // The value we return becomes the `fulfilled` action payload
    console.log('response',response);
    return response;
  }
);

export const usersSlice = createSlice({
  name: 'users',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    getUsers: (state, action?: PayloadAction<string[]>) => {
      if(action){
        state.value = action?.payload;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(usersAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(usersAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(usersAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { getUsers } = usersSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.users.value)`
export const selectUsers= (state: RootState) => state.users.value;


export default usersSlice.reducer;
